services:

  # Backend web server
  backend:
    # Use image tag from the environment variable to allow for local testing or CI
    image: communityfirst/guardianconnector-explorer:${ImgTag:-latest}
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      database:
        condition: service_healthy
    environment:
      # All the NUXT_DB_* refer to  connection details from the 'database' service below
      NUXT_DB_HOST: database
      NUXT_DB_PORT: 5432
      NUXT_DB_USER: testuser
      NUXT_DB_PASSWORD: testpassword
      NUXT_DATABASE: test_warehouse
      # Add the secrets from GitHub Actions
      NUXT_PUBLIC_APP_API_KEY: ${NUXT_PUBLIC_APP_API_KEY}
      NUXT_PUBLIC_AUTH_STRATEGY: "none"
      NUXT_SESSION_SECRET: ${NUXT_SESSION_SECRET}
      NUXT_PORT: 8080
      CI: "true"
      BASE_URL: http://localhost:8080
      MAPBOX_ACCESS_TOKEN: ${MAPBOX_ACCESS_TOKEN}
      MEDIA_BASE_PATH: ${MEDIA_BASE_PATH}
      PLANET_API_KEY: ${PLANET_API_KEY}

  database:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=test_warehouse
      - POSTGRES_USER=testuser
      - POSTGRES_PASSWORD=testpassword
    volumes:
      # Initialize DB on first container startup
      #   /docker-entrypoint-initdb.d is a special directory recognized by Postgres:
      #   If the data directory is empty postgres will run these files.
      - ./db/init:/docker-entrypoint-initdb.d:ro
      # Persist database data after first container startup
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d test_warehouse"]
      interval: 2s
      timeout: 5s
      retries: 10
    # Add a script to log database state after initialization
    command: >
      sh -c "
        # Start postgres normally
        docker-entrypoint.sh postgres &
        # Wait for postgres to be ready
        until pg_isready -U testuser -d test_warehouse; do sleep 1; done
        # Log the database state
        echo '🔍 Database initialization complete'
        echo '🔍 Available tables:'
        psql -U testuser -d test_warehouse -c '\dt'
        echo '🔍 Table row counts:'
        psql -U testuser -d test_warehouse -c 'SELECT schemaname, tablename, n_tup_ins as rows FROM pg_stat_user_tables ORDER BY tablename;'
        echo '🔍 Available tables and their contents:'
        echo '🔍 bcmform_responses table (first 3 rows):'
        psql -U testuser -d test_warehouse -c 'SELECT * FROM bcmform_responses LIMIT 3;' || echo 'bcmform_responses table does not exist'
        echo '🔍 fake_alerts table (first 3 rows):'
        psql -U testuser -d test_warehouse -c 'SELECT * FROM fake_alerts LIMIT 3;' || echo 'fake_alerts table does not exist'
        echo '🔍 mapeo_data table (first 3 rows):'
        psql -U testuser -d test_warehouse -c 'SELECT * FROM mapeo_data LIMIT 3;' || echo 'mapeo_data table does not exist'
        # Keep the container running
        wait
      "

volumes:
  db_data:
