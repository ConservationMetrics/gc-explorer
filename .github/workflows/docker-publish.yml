name: CI

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  release:
    types: [created]

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies and run unit tests
        run: |
          npm install -g pnpm
          pnpm install
          pnpm run test:unit

  playwright-tests:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-build-and-publish]
    env:
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: |
          npm install -g pnpm
          pnpm install
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps
      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          CI=true
          NUXT_PUBLIC_APP_API_KEY=${{ secrets.APP_API_KEY }}
          NUXT_PUBLIC_AUTH_STRATEGY="none"
          NUXT_SESSION_SECRET=${{ secrets.NUXT_SESSION_SECRET }}
          NUXT_PORT=8080
          BASE_URL=http://backend:8080
          MAPBOX_ACCESS_TOKEN=${{ secrets.MAPBOX_ACCESS_TOKEN }}
          MEDIA_BASE_PATH=${{ secrets.MEDIA_BASE_PATH }}
          # Database connection details (matching docker-compose)
          NUXT_DB_HOST=database
          NUXT_DB_PORT=5432
          NUXT_DB_USER=testuser
          NUXT_DB_PASSWORD=testpassword
          NUXT_DATABASE=test_warehouse
          EOF
      - name: Show .env.test (with secrets masked)
        run: |
          sed -E 's/(NUXT_SESSION_SECRET|NUXT_PUBLIC_APP_API_KEY)=(.*)/\1=***/g' .env.test
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull the built image
        run: |
          docker pull communityfirst/guardianconnector-explorer:latest
      - name: Run tests with docker-compose
        run: |
          # Set the image tag to use the latest built image
          export ImgTag=latest
          # Export environment variables for docker-compose
          export NUXT_PUBLIC_APP_API_KEY="${{ secrets.APP_API_KEY }}"
          export NUXT_SESSION_SECRET="${{ secrets.NUXT_SESSION_SECRET }}"
          export MAPBOX_ACCESS_TOKEN="${{ secrets.MAPBOX_ACCESS_TOKEN }}"
          export MEDIA_BASE_PATH="${{ secrets.MEDIA_BASE_PATH }}"
          # Start the services with environment variables
          docker compose -f docker-compose.tests.yml up -d database backend
          # Wait for the backend to be ready with proper health check
          echo "Waiting for backend to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:8080; do sleep 2; done'
          echo "Backend is ready!"
          # Check if services are running
          docker compose -f docker-compose.tests.yml ps
          # Run the tests directly in the workflow
          echo "Running Playwright tests..."
          pnpm run test:e2e
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: test-results/
          retention-days: 30
      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.tests.yml down -v

  docker-build-and-publish:
    name: Docker Build and Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: communityfirst/guardianconnector-explorer
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ github.ref == 'refs/heads/main' && 'communityfirst/guardianconnector-explorer:latest' || '' }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Docker Hub Description
        if: github.event_name == 'release'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: communityfirst/guardianconnector-explorer
          short-description: 'A Nuxt app to explore GuardianConnector data in different views'
